---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
data:
  prestop-redis.sh: |
    #!/bin/bash
    if [[ ! -z "$REDIS_PASSWORD" ]]; then
      export REDISCLI_AUTH=$REDIS_PASSWORD
    fi
    
    REDIS_ROLE=$(redis-cli role | head -1)
    if [[ "$REDIS_ROLE" == "master" ]]; then
      NODE_ID=$(redis-cli cluster myid)
      FIRST_REPLICAS_INFO=($(redis-cli cluster replicas $NODE_ID | head -n 1))
      FIRST_REPLICA_HOST="${FIRST_REPLICAS_INFO[1]%:*}"
      redis-cli client pause 20000 ALL
      redis-cli -h $FIRST_REPLICA_HOST cluster failover
      
      while [[ $(redis-cli role | head -1) != 'slave' ]]; do # wait until failover finished
        sleep 1
      done
    fi
  ping.sh: |
    #!/bin/bash
    if [[ ! -z "$REDIS_PASSWORD" ]]; then
      export REDISCLI_AUTH=$REDIS_PASSWORD
    fi
    
    response=$(timeout 5 redis-cli -h $1 -p $2 ping)
    if [ "$response" != "PONG" ]; then
      exit 1
    fi
    
    check_output=$(redis-cli cluster info)
    if [[ ! $check_output =~ "cluster_state:ok" ]]; then
      exit 1
    fi

  start-node.sh: |
    #!/bin/bash 
  
    cp -r /etc/redis/mounted/config/. /etc/redis/config/
    
    echo "" >> /etc/redis/config/redis.conf
    
    if [[ ! -z "$REDIS_PASSWORD" ]]; then
      echo "requirepass $REDIS_PASSWORD" >> /etc/redis/config/redis.conf
      echo "masterauth $REDIS_PASSWORD" >> /etc/redis/config/redis.conf
    fi
    
    echo "cluster-announce-ip $HOSTNAME.$REDIS_HEADLESS_SERVICE" >> /etc/redis/config/redis.conf  
    
    ARGS=("--include" "/etc/redis/config/redis.conf") #todo port
    exec redis-server "${ARGS[@]}"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
  annotations:
    "app.uw.systems/name": "Redis"
    "app.uw.systems/description": "A key value store"
    "app.uw.systems/repos.kubernetes-manifests": "https://github.com/utilitywarehouse/shared-kustomize-bases/redis-cluster/base"
    "app.uw.systems/tags.oss": "true"
spec:
  replicas: 6
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - redis
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: redis
          image: redis
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/scripts/start-node.sh
          envFrom:
            - configMapRef:
                name: redis-env
            - secretRef:
                name: redis-password
          ports:
            - name: redis
              containerPort: 6379
            - name: redis-bus
              containerPort: 16379
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - /opt/scripts/prestop-redis.sh > /proc/1/fd/1
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /opt/scripts/ping.sh localhost $REDIS_PORT
          resources:
            limits:
              cpu: 1000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: redis-scripts
              mountPath: /opt/scripts
            - name: config
              mountPath: /etc/redis/mounted/config
            - name: data
              mountPath: /data
              readOnly: false
            - name: tmp-config
              mountPath: /etc/redis/config
              readOnly: false
        - name: metrics
          image: oliver006/redis_exporter:v1.59.0-alpine
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - configMapRef:
                name: redis-env
            - secretRef:
                name: redis-password
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:$(REDIS_PORT)"
            - name: REDIS_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":8081"
            - name: REDIS_EXPORTER_WEB_TELEMETRY_PATH
              value: "/__/metrics"
            - name: REDIS_EXPORTER_SKIP_TLS_VERIFICATION
              value: "1"
          ports:
            - name: metrics
              containerPort: 8081
              protocol: TCP
      volumes:
        - name: redis-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-config
            defaultMode: 0755
        - name: tmp-config
          emptyDir: { }
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi