apiVersion: v1
kind: ConfigMap
metadata:
  name: cockroachdb-scripts
data:
  wait-for-cluster-to-be-ready.sh: |
    #!/bin/bash
    
    MAX_RETRIES=20
    RETRY_INTERVAL=3
    
    is_cluster_ready() {
      cockroach sql --execute="SELECT 1;" &> /dev/null
    }
    
    until is_cluster_ready; do
      ((retry_count++))
    
      if [ $retry_count -ge $MAX_RETRIES ]; then
          echo "Reached maximum retries. Cluster is not ready."
          exit 1
      fi

      echo "Cluster is not ready yet. Retry $retry_count/$MAX_RETRIES. Waiting for $RETRY_INTERVAL seconds..."
      sleep $RETRY_INTERVAL
    done 

  user-schema-bootstrap.sh: |
    #!/bin/bash
    set -e

    if [ -z "$DB_USER" ]; then
        echo "DB_USER envvar is not set"
        exit 1
    fi

    if [ -z "$DB_NAME" ]; then
        echo "DB_NAME envvar not set"
        exit 1
    fi

    # execute command 
    SQL_CMD="/cockroach/cockroach -d system sql" > /dev/null

    # try creating user, database, grant database permissions to user
    $SQL_CMD << EOF
      CREATE USER IF NOT EXISTS $DB_USER;
      CREATE DATABASE IF NOT EXISTS $DB_NAME;
      GRANT ALL ON DATABASE $DB_NAME TO $DB_USER;
    EOF
    
    # If database already exists and contains tables, grant access to them for user. 
    # This command will fail for freshly initialized databases.
    $SQL_CMD --execute "GRANT ALL ON TABLE $DB_NAME.* TO $DB_USER;" || true

  backup-bootstrap.sh: |
    #!/bin/bash
    set -e

    if [ -z "$BACKUP_SCHEDULE" ]; then
        echo "BACKUP_SCHEDULE envvar is not set"
        exit 1
    fi

    if [ -z "$BACKUP_DESTINATION_URL" ]; then
        echo "BACKUP_DESTINATION_URL envvar is not set"
        exit 1
    fi
    
    # execute command
    SQL_CMD="/cockroach/cockroach sql" > /dev/null

    $SQL_CMD << EOF
      BEGIN;
      -- create a new schedule
      CREATE SCHEDULE IF NOT EXISTS cluster_backup
        FOR BACKUP INTO '$BACKUP_DESTINATION_URL'
          RECURRING '$BACKUP_SCHEDULE'
          FULL BACKUP ALWAYS
          WITH SCHEDULE OPTIONS ignore_existing_backups;
      COMMIT;
    EOF
